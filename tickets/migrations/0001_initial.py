# Generated by Django 4.2.7 on 2025-09-25 16:50

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Ticket',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('username', models.CharField(help_text='Username for the ticket', max_length=50)),
                ('password', models.CharField(help_text='Password/PIN for the ticket', max_length=20)),
                ('status', models.CharField(choices=[('active', 'Active'), ('used', 'Used'), ('expired', 'Expired'), ('cancelled', 'Cancelled')], default='active', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('activated_at', models.DateTimeField(blank=True, help_text='When the ticket was first used', null=True)),
                ('expires_at', models.DateTimeField(blank=True, help_text='When the ticket expires', null=True)),
                ('data_used_bytes', models.BigIntegerField(default=0, help_text='Data used in bytes')),
                ('time_used_seconds', models.BigIntegerField(default=0, help_text='Time used in seconds')),
                ('mikrotik_username', models.CharField(blank=True, help_text='Username in MikroTik', max_length=50)),
                ('mikrotik_profile', models.CharField(blank=True, help_text='MikroTik profile name', max_length=100)),
                ('is_synced_to_router', models.BooleanField(default=False, help_text='Whether synced to MikroTik router')),
                ('notes', models.TextField(blank=True, help_text='Additional notes about this ticket')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TicketUsage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('data_used_bytes', models.BigIntegerField(default=0)),
                ('time_used_seconds', models.BigIntegerField(default=0)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True)),
                ('ticket', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='usage_logs', to='tickets.ticket')),
            ],
            options={
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='TicketType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="Ticket type name (e.g., '1 Hour', '1GB Data')", max_length=100)),
                ('ticket_type', models.CharField(choices=[('time', 'Time-based'), ('data', 'Data-based'), ('unlimited', 'Unlimited')], default='time', max_length=20)),
                ('description', models.TextField(blank=True, help_text='Description of the ticket type')),
                ('duration_hours', models.PositiveIntegerField(blank=True, help_text='Duration in hours for time-based tickets', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(8760)])),
                ('data_limit_gb', models.PositiveIntegerField(blank=True, help_text='Data limit in GB for data-based tickets', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(1000)])),
                ('price', models.DecimalField(decimal_places=2, help_text='Price in KES', max_digits=10)),
                ('currency', models.CharField(default='KES', max_length=3)),
                ('is_active', models.BooleanField(default=True)),
                ('is_popular', models.BooleanField(default=False, help_text='Mark as popular ticket type')),
                ('sort_order', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, help_text='Admin who created this ticket type', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Ticket Type',
                'verbose_name_plural': 'Ticket Types',
                'ordering': ['sort_order', 'price'],
            },
        ),
        migrations.CreateModel(
            name='TicketSale',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sold_at', models.DateTimeField(auto_now_add=True)),
                ('sale_price', models.DecimalField(decimal_places=2, help_text='Actual sale price', max_digits=10)),
                ('payment_method', models.CharField(choices=[('cash', 'Cash'), ('mpesa', 'M-Pesa'), ('airtel', 'Airtel Money'), ('pesapal', 'Pesapal'), ('other', 'Other')], default='cash', max_length=20)),
                ('payment_reference', models.CharField(blank=True, help_text='Payment reference number', max_length=100)),
                ('customer_name', models.CharField(blank=True, max_length=100)),
                ('customer_phone', models.CharField(blank=True, max_length=15)),
                ('customer_email', models.EmailField(blank=True, max_length=254)),
                ('notes', models.TextField(blank=True)),
                ('sold_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ticket_sales', to=settings.AUTH_USER_MODEL)),
                ('ticket', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='sale', to='tickets.ticket')),
            ],
            options={
                'ordering': ['-sold_at'],
            },
        ),
        migrations.CreateModel(
            name='TicketBatch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Batch name', max_length=200)),
                ('quantity', models.PositiveIntegerField(help_text='Number of tickets to generate')),
                ('username_prefix', models.CharField(blank=True, help_text='Prefix for usernames', max_length=10)),
                ('password_length', models.PositiveIntegerField(default=6, help_text='Password length')),
                ('is_generated', models.BooleanField(default=False)),
                ('generated_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('ticket_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='batches', to='tickets.tickettype')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ticket_batches', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='ticket',
            name='ticket_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tickets', to='tickets.tickettype'),
        ),
        migrations.AddField(
            model_name='ticket',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tickets', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddIndex(
            model_name='ticket',
            index=models.Index(fields=['username', 'password'], name='tickets_tic_usernam_a198c2_idx'),
        ),
        migrations.AddIndex(
            model_name='ticket',
            index=models.Index(fields=['status'], name='tickets_tic_status_0e5646_idx'),
        ),
        migrations.AddIndex(
            model_name='ticket',
            index=models.Index(fields=['expires_at'], name='tickets_tic_expires_e92ba3_idx'),
        ),
    ]
