# Generated by Django 4.2.7 on 2025-09-27 22:34

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


def ensure_provider_table_exists(apps, schema_editor):
    """
    Ensure the Provider table exists before adding fields to it.
    This handles cases where Heroku starts with a clean database.
    """
    db_alias = schema_editor.connection.alias
    
    # Check if the table exists
    with schema_editor.connection.cursor() as cursor:
        cursor.execute("""
            SELECT EXISTS (
                SELECT FROM information_schema.tables 
                WHERE table_schema = 'public' 
                AND table_name = 'accounts_provider'
            );
        """)
        table_exists = cursor.fetchone()[0]
    
    if not table_exists:
        # If Provider table doesn't exist, we need to create it first
        # This should not happen in normal circumstances, but ensures Heroku deployment works
        from django.db import connection
        with connection.cursor() as cursor:
            # Create the Provider table with basic structure
            cursor.execute("""
                CREATE TABLE accounts_provider (
                    id BIGSERIAL PRIMARY KEY,
                    status VARCHAR(20) DEFAULT 'pending',
                    license_number VARCHAR(100) UNIQUE NOT NULL,
                    business_name VARCHAR(200) NOT NULL,
                    business_type VARCHAR(100) NOT NULL,
                    registration_number VARCHAR(100),
                    tax_id VARCHAR(100),
                    contact_person VARCHAR(200) NOT NULL,
                    contact_phone VARCHAR(15) NOT NULL,
                    contact_email VARCHAR(254) NOT NULL,
                    address TEXT NOT NULL,
                    city VARCHAR(100) NOT NULL,
                    county VARCHAR(100) NOT NULL,
                    country VARCHAR(100) DEFAULT 'Kenya',
                    service_areas TEXT,
                    number_of_locations INTEGER DEFAULT 1,
                    estimated_monthly_users INTEGER DEFAULT 100,
                    bank_name VARCHAR(100),
                    bank_account VARCHAR(100),
                    mpesa_number VARCHAR(15),
                    subscription_status VARCHAR(20) DEFAULT 'inactive',
                    subscription_start_date TIMESTAMP WITH TIME ZONE,
                    subscription_end_date TIMESTAMP WITH TIME ZONE,
                    is_approved BOOLEAN DEFAULT FALSE,
                    approved_at TIMESTAMP WITH TIME ZONE,
                    business_license VARCHAR(100),
                    tax_certificate VARCHAR(100),
                    id_copy VARCHAR(100),
                    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
                    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
                    approved_by_id BIGINT,
                    user_id BIGINT UNIQUE NOT NULL,
                    FOREIGN KEY (approved_by_id) REFERENCES accounts_user(id),
                    FOREIGN KEY (user_id) REFERENCES accounts_user(id)
                );
            """)


def reverse_ensure_provider_table_exists(apps, schema_editor):
    """Reverse operation - do nothing"""
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('accounts', '0003_auto_20250928_0100'),
    ]

    operations = [
        migrations.RunPython(
            ensure_provider_table_exists,
            reverse_ensure_provider_table_exists,
        ),
        migrations.AddField(
            model_name='provider',
            name='callback_url',
            field=models.URLField(blank=True, help_text='Auto-generated callback URL for this provider', null=True),
        ),
        migrations.AddField(
            model_name='provider',
            name='mpesa_consumer_key',
            field=models.TextField(blank=True, help_text='M-PESA Daraja API Consumer Key (encrypted)', null=True),
        ),
        migrations.AddField(
            model_name='provider',
            name='mpesa_consumer_secret',
            field=models.TextField(blank=True, help_text='M-PESA Daraja API Consumer Secret (encrypted)', null=True),
        ),
        migrations.AddField(
            model_name='provider',
            name='mpesa_credentials_verified',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='provider',
            name='mpesa_environment',
            field=models.CharField(choices=[('sandbox', 'Sandbox'), ('production', 'Production')], default='sandbox', max_length=10),
        ),
        migrations.AddField(
            model_name='provider',
            name='mpesa_last_test',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='provider',
            name='mpesa_passkey',
            field=models.TextField(blank=True, help_text='M-PESA Daraja API Passkey (encrypted)', null=True),
        ),
        migrations.AddField(
            model_name='provider',
            name='mpesa_shortcode',
            field=models.CharField(blank=True, help_text='M-PESA Paybill/Till Number', max_length=20, null=True),
        ),
        migrations.AddField(
            model_name='provider',
            name='mpesa_test_status',
            field=models.CharField(blank=True, choices=[('pending', 'Pending'), ('success', 'Success'), ('failed', 'Failed')], max_length=20, null=True),
        ),
        migrations.CreateModel(
            name='Cashier',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('suspended', 'Suspended')], default='active', max_length=20)),
                ('can_generate_tickets', models.BooleanField(default=True)),
                ('can_sell_tickets', models.BooleanField(default=True)),
                ('can_view_sales', models.BooleanField(default=False)),
                ('can_manage_users', models.BooleanField(default=False)),
                ('can_download_configs', models.BooleanField(default=False)),
                ('employee_id', models.CharField(blank=True, max_length=50, null=True)),
                ('shift_hours', models.CharField(blank=True, max_length=100, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('provider', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cashiers', to='accounts.provider')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='cashier_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
    ]
